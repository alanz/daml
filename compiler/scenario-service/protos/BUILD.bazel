# Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load("//bazel_tools:haskell.bzl", "da_haskell_library", "da_haskell_test")
load("@io_grpc_grpc_java//:java_grpc_library.bzl", "java_grpc_library")
load("//bazel_tools:proto.bzl", "proto_gen")

proto_library(
    name = "scenario_service_proto",
    srcs = ["scenario_service.proto"],
    visibility = ["//visibility:public"],
    deps = [],
)

java_proto_library(
    name = "scenario_service_java_proto",
    visibility = ["//visibility:public"],
    deps = [":scenario_service_proto"],
)

java_grpc_library(
    name = "scenario_service_java_grpc",
    srcs = ["scenario_service_proto"],
    visibility = ["//visibility:public"],
    deps = [":scenario_service_java_proto"],
)

# FIXME(JM): Modify compile-proto-file to allow specifying
# the output file and module name rather than directory.
genrule(
    name = "scenario_service_haskell_proto_src",
    srcs = ["scenario_service.proto"],
    outs = ["ScenarioService.hs"],
    cmd = """
    ORIGPWD=$$PWD
    cd compiler/scenario-service/protos
    $$ORIGPWD/$(location @haskell_proto3__suite//:compile-proto-file) \
      --proto scenario_service.proto --out "$$ORIGPWD/$(@D)"
  """,
    tools = [
        "@haskell_proto3__suite//:compile-proto-file",
    ],
)

da_haskell_library(
    name = "scenario_service_haskell_proto",
    srcs = [":scenario_service_haskell_proto_src"],
    hazel_deps = [
        "base",
        "bytestring",
        "containers",
        "deepseq",
        "proto3-suite",
        "proto3-wire",
        "text",
        "vector",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//nix/third-party/gRPC-haskell:grpc-haskell",
        "//nix/third-party/gRPC-haskell/core:grpc-haskell-core",
    ],
)
